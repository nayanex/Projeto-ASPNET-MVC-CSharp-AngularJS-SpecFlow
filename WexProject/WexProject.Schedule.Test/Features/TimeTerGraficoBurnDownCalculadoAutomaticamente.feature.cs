// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18052
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace WexProject.Schedule.Test.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TimeTerGraficoDeBurndownDeUmPlanejamentoDeTarefasCalculadoAutomaticamenteFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TimeTerGraficoBurnDownCalculadoAutomaticamente.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Time ter grafico de burndown de um planejamento de tarefas calculado automaticame" +
                    "nte", "", ProgrammingLanguage.CSharp, new string[] {
                        "Burndown"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Time ter grafico de burndown de um planejamento de tarefas calculado automaticame" +
                            "nte")))
            {
                WexProject.Schedule.Test.Features.TimeTerGraficoDeBurndownDeUmPlanejamentoDeTarefasCalculadoAutomaticamenteFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "tipo",
                        "nome",
                        "situacao",
                        "padrao"});
            table1.AddRow(new string[] {
                        "Planejamento",
                        "Não Iniciado",
                        "Ativo",
                        "Sim"});
            table1.AddRow(new string[] {
                        "Cancelamento",
                        "Cancelado",
                        "Ativo",
                        "Não"});
            table1.AddRow(new string[] {
                        "Encerramento",
                        "Pronto",
                        "Ativo",
                        "Não"});
            table1.AddRow(new string[] {
                        "Impedimento",
                        "Impedido",
                        "Ativo",
                        "Não"});
            table1.AddRow(new string[] {
                        "Execução",
                        "Em Andamento",
                        "Ativo",
                        "Não"});
#line 7
 testRunner.Given("que exista(m) a(s) situacao(oes) de planejamento a seguir:", ((string)(null)), table1, "Dado ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("01.01 - Calcular o burndown quando nao houver tarefas planejadas em um periodo se" +
            "m finais de semana")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Time ter grafico de burndown de um planejamento de tarefas calculado automaticame" +
            "nte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        public virtual void _01_01_CalcularOBurndownQuandoNaoHouverTarefasPlanejadasEmUmPeriodoSemFinaisDeSemana()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01.01 - Calcular o burndown quando nao houver tarefas planejadas em um periodo se" +
                    "m finais de semana", new string[] {
                        "Burndown"});
#line 16
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "nome",
                        "inicio",
                        "final"});
            table2.AddRow(new string[] {
                        "C1",
                        "05/05/14",
                        "09/05/14"});
#line 17
  testRunner.Given("que exista(m) o(s) cronograma(s)", ((string)(null)), table2, "Dado ");
#line 20
testRunner.When("o grafico burndown for calculado para o cronograma \'C1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Data",
                        "Planejado",
                        "Restante"});
            table3.AddRow(new string[] {
                        "05/05/14",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "06/05/14",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "07/05/14",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "08/05/14",
                        "",
                        ""});
            table3.AddRow(new string[] {
                        "09/05/14",
                        "",
                        ""});
#line 21
 testRunner.Then("o grafico de burndown deve conter os seguintes valores para o cronograma \'C1\':", ((string)(null)), table3, "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("01.02 - Calcular o burndown quando houver tarefas planejadas em um periodo sem fi" +
            "nais de semana")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Time ter grafico de burndown de um planejamento de tarefas calculado automaticame" +
            "nte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        public virtual void _01_02_CalcularOBurndownQuandoHouverTarefasPlanejadasEmUmPeriodoSemFinaisDeSemana()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01.02 - Calcular o burndown quando houver tarefas planejadas em um periodo sem fi" +
                    "nais de semana", new string[] {
                        "Burndown"});
#line 30
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "nome",
                        "inicio",
                        "final"});
            table4.AddRow(new string[] {
                        "C1",
                        "05/05/14",
                        "09/05/14"});
#line 31
  testRunner.Given("que exista(m) o(s) cronograma(s)", ((string)(null)), table4, "Dado ");
#line 34
     testRunner.And("que o dia atual seja \'04/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "descricao",
                        "situacao",
                        "estimativa inicial"});
            table5.AddRow(new string[] {
                        "1",
                        "T1",
                        "Planejamento",
                        "9"});
            table5.AddRow(new string[] {
                        "2",
                        "T2",
                        "Planejamento",
                        "7"});
            table5.AddRow(new string[] {
                        "3",
                        "T3",
                        "Planejamento",
                        "5"});
#line 35
     testRunner.And("que o cronograma \'C1\' possui as seguintes tarefas:", ((string)(null)), table5, "E ");
#line 40
 testRunner.When("o grafico burndown for calculado para o cronograma \'C1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Data",
                        "Planejado",
                        "Restante"});
            table6.AddRow(new string[] {
                        "05/05/14",
                        "21",
                        ""});
            table6.AddRow(new string[] {
                        "06/05/14",
                        "15,75",
                        ""});
            table6.AddRow(new string[] {
                        "07/05/14",
                        "10,5",
                        ""});
            table6.AddRow(new string[] {
                        "08/05/14",
                        "5,25",
                        ""});
            table6.AddRow(new string[] {
                        "09/05/14",
                        "0",
                        ""});
#line 41
 testRunner.Then("o grafico de burndown deve conter os seguintes valores para o cronograma \'C1\':", ((string)(null)), table6, "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("01.03 - Calcular o burndown quando houver tarefas planejadas em um periodo com fi" +
            "nal de semana")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Time ter grafico de burndown de um planejamento de tarefas calculado automaticame" +
            "nte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        public virtual void _01_03_CalcularOBurndownQuandoHouverTarefasPlanejadasEmUmPeriodoComFinalDeSemana()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01.03 - Calcular o burndown quando houver tarefas planejadas em um periodo com fi" +
                    "nal de semana", new string[] {
                        "Burndown"});
#line 50
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "nome",
                        "inicio",
                        "final"});
            table7.AddRow(new string[] {
                        "C1",
                        "05/05/14",
                        "12/05/14"});
#line 51
  testRunner.Given("que exista(m) o(s) cronograma(s)", ((string)(null)), table7, "Dado ");
#line 54
     testRunner.And("que o dia atual seja \'05/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "descricao",
                        "situacao",
                        "estimativa inicial"});
            table8.AddRow(new string[] {
                        "1",
                        "T1",
                        "Planejamento",
                        "10"});
            table8.AddRow(new string[] {
                        "2",
                        "T2",
                        "Planejamento",
                        "7"});
            table8.AddRow(new string[] {
                        "3",
                        "T3",
                        "Planejamento",
                        "10"});
            table8.AddRow(new string[] {
                        "4",
                        "T4",
                        "Planejamento",
                        "3"});
#line 55
     testRunner.And("que o cronograma \'C1\' possui as seguintes tarefas:", ((string)(null)), table8, "E ");
#line 61
 testRunner.When("o grafico burndown for calculado para o cronograma \'C1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Data",
                        "Planejado",
                        "Restante"});
            table9.AddRow(new string[] {
                        "05/05/14",
                        "30",
                        "30"});
            table9.AddRow(new string[] {
                        "06/05/14",
                        "24",
                        ""});
            table9.AddRow(new string[] {
                        "07/05/14",
                        "18",
                        ""});
            table9.AddRow(new string[] {
                        "08/05/14",
                        "12",
                        ""});
            table9.AddRow(new string[] {
                        "09/05/14",
                        "6",
                        ""});
            table9.AddRow(new string[] {
                        "12/05/14",
                        "0",
                        ""});
#line 62
 testRunner.Then("o grafico de burndown deve conter os seguintes valores para o cronograma \'C1\':", ((string)(null)), table9, "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("01.04 - Calcular o burndown quando houver tarefas planejadas em um periodo com ca" +
            "lendario institucional definindo um sabado como dia util")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Time ter grafico de burndown de um planejamento de tarefas calculado automaticame" +
            "nte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        public virtual void _01_04_CalcularOBurndownQuandoHouverTarefasPlanejadasEmUmPeriodoComCalendarioInstitucionalDefinindoUmSabadoComoDiaUtil()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01.04 - Calcular o burndown quando houver tarefas planejadas em um periodo com ca" +
                    "lendario institucional definindo um sabado como dia util", new string[] {
                        "Burndown"});
#line 72
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "nome",
                        "inicio",
                        "final"});
            table10.AddRow(new string[] {
                        "C1",
                        "05/05/14",
                        "12/05/14"});
#line 73
 testRunner.Given("que exista(m) o(s) cronograma(s)", ((string)(null)), table10, "Dado ");
#line 76
     testRunner.And("que o dia atual seja \'05/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "descricao",
                        "situacao",
                        "estimativa inicial"});
            table11.AddRow(new string[] {
                        "1",
                        "T1",
                        "Planejamento",
                        "10"});
            table11.AddRow(new string[] {
                        "2",
                        "T2",
                        "Planejamento",
                        "7"});
            table11.AddRow(new string[] {
                        "3",
                        "T3",
                        "Planejamento",
                        "10"});
            table11.AddRow(new string[] {
                        "4",
                        "T4",
                        "Planejamento",
                        "3"});
#line 77
     testRunner.And("que o cronograma \'C1\' possui as seguintes tarefas:", ((string)(null)), table11, "E ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Vigencia",
                        "Data",
                        "Descricao",
                        "Tipo",
                        "Situacao"});
            table12.AddRow(new string[] {
                        "Por dia, mes e ano",
                        "10/05/14",
                        "Hora Extra",
                        "Trabalho",
                        "Ativo"});
#line 83
     testRunner.And("que o calendario institucional possui as seguintes definicoes:", ((string)(null)), table12, "E ");
#line 86
 testRunner.When("o grafico burndown for calculado para o cronograma \'C1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Data",
                        "Planejado",
                        "Restante"});
            table13.AddRow(new string[] {
                        "05/05/14",
                        "30",
                        "30"});
            table13.AddRow(new string[] {
                        "06/05/14",
                        "25",
                        ""});
            table13.AddRow(new string[] {
                        "07/05/14",
                        "20",
                        ""});
            table13.AddRow(new string[] {
                        "08/05/14",
                        "15",
                        ""});
            table13.AddRow(new string[] {
                        "09/05/14",
                        "10",
                        ""});
            table13.AddRow(new string[] {
                        "10/05/14",
                        "5",
                        ""});
            table13.AddRow(new string[] {
                        "12/05/14",
                        "0",
                        ""});
#line 87
 testRunner.Then("o grafico de burndown deve conter os seguintes valores para o cronograma \'C1\':", ((string)(null)), table13, "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("01.05 - Calcular o burndown quando houver tarefas planejadas em um periodo com fe" +
            "riados")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Time ter grafico de burndown de um planejamento de tarefas calculado automaticame" +
            "nte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        public virtual void _01_05_CalcularOBurndownQuandoHouverTarefasPlanejadasEmUmPeriodoComFeriados()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01.05 - Calcular o burndown quando houver tarefas planejadas em um periodo com fe" +
                    "riados", new string[] {
                        "Burndown"});
#line 98
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "nome",
                        "inicio",
                        "final"});
            table14.AddRow(new string[] {
                        "C1",
                        "05/05/14",
                        "09/05/14"});
#line 99
 testRunner.Given("que exista(m) o(s) cronograma(s)", ((string)(null)), table14, "Dado ");
#line 102
     testRunner.And("que o dia atual seja \'05/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Vigencia",
                        "Data",
                        "Descricao",
                        "Tipo",
                        "Situacao"});
            table15.AddRow(new string[] {
                        "Por dia do mes",
                        "07/05",
                        "Folga 01",
                        "Folga",
                        "Ativo"});
            table15.AddRow(new string[] {
                        "Por dia, mes e ano",
                        "08/05/14",
                        "Folga 02",
                        "Folga",
                        "Inativo"});
            table15.AddRow(new string[] {
                        "Por dia, mes e ano",
                        "09/05/14",
                        "Folga 03",
                        "Folga",
                        "Ativo"});
#line 103
     testRunner.And("que o calendario institucional possui as seguintes definicoes:", ((string)(null)), table15, "E ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "descricao",
                        "situacao",
                        "estimativa inicial"});
            table16.AddRow(new string[] {
                        "1",
                        "T1",
                        "Planejamento",
                        "10"});
            table16.AddRow(new string[] {
                        "2",
                        "T2",
                        "Planejamento",
                        "7"});
            table16.AddRow(new string[] {
                        "3",
                        "T3",
                        "Planejamento",
                        "10"});
            table16.AddRow(new string[] {
                        "4",
                        "T4",
                        "Planejamento",
                        "3"});
#line 108
     testRunner.And("que o cronograma \'C1\' possui as seguintes tarefas:", ((string)(null)), table16, "E ");
#line 114
 testRunner.When("o grafico burndown for calculado para o cronograma \'C1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "Data",
                        "Planejado",
                        "Restante"});
            table17.AddRow(new string[] {
                        "05/05/14",
                        "30",
                        "30"});
            table17.AddRow(new string[] {
                        "06/05/14",
                        "15",
                        ""});
            table17.AddRow(new string[] {
                        "08/05/14",
                        "0",
                        ""});
#line 115
 testRunner.Then("o grafico de burndown deve conter os seguintes valores para o cronograma \'C1\':", ((string)(null)), table17, "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("01.06 - Calcular o burndown quando nao houver historico de trabalho apos o inicio" +
            " da execucao")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Time ter grafico de burndown de um planejamento de tarefas calculado automaticame" +
            "nte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        public virtual void _01_06_CalcularOBurndownQuandoNaoHouverHistoricoDeTrabalhoAposOInicioDaExecucao()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01.06 - Calcular o burndown quando nao houver historico de trabalho apos o inicio" +
                    " da execucao", new string[] {
                        "Burndown"});
#line 122
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        "nome",
                        "inicio",
                        "final"});
            table18.AddRow(new string[] {
                        "C1",
                        "05/05/14",
                        "12/05/14"});
#line 123
 testRunner.Given("que exista(m) o(s) cronograma(s)", ((string)(null)), table18, "Dado ");
#line 126
     testRunner.And("que o dia atual seja \'05/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "descricao",
                        "situacao",
                        "estimativa inicial"});
            table19.AddRow(new string[] {
                        "1",
                        "T1",
                        "Planejamento",
                        "10"});
            table19.AddRow(new string[] {
                        "2",
                        "T2",
                        "Planejamento",
                        "7"});
            table19.AddRow(new string[] {
                        "3",
                        "T3",
                        "Planejamento",
                        "10"});
            table19.AddRow(new string[] {
                        "4",
                        "T4",
                        "Execução",
                        "3"});
#line 127
     testRunner.And("que o cronograma \'C1\' possui as seguintes tarefas:", ((string)(null)), table19, "E ");
#line 133
     testRunner.And("que o dia atual seja \'07/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 134
 testRunner.When("o grafico burndown for calculado para o cronograma \'C1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "Data",
                        "Planejado",
                        "Restante"});
            table20.AddRow(new string[] {
                        "05/05/14",
                        "30",
                        "30"});
            table20.AddRow(new string[] {
                        "06/05/14",
                        "24",
                        "30"});
            table20.AddRow(new string[] {
                        "07/05/14",
                        "18",
                        "30"});
            table20.AddRow(new string[] {
                        "08/05/14",
                        "12",
                        ""});
            table20.AddRow(new string[] {
                        "09/05/14",
                        "6",
                        ""});
            table20.AddRow(new string[] {
                        "12/05/14",
                        "0",
                        ""});
#line 135
 testRunner.Then("o grafico de burndown deve conter os seguintes valores para o cronograma \'C1\':", ((string)(null)), table20, "Entao ");
#line 143
     testRunner.And("o cronograma \'C1\' deve ter um desvio de -12 horas", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("02.01 - Calcular o burndown quando houver historico de trabalho em um final de se" +
            "mana")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Time ter grafico de burndown de um planejamento de tarefas calculado automaticame" +
            "nte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        public virtual void _02_01_CalcularOBurndownQuandoHouverHistoricoDeTrabalhoEmUmFinalDeSemana()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02.01 - Calcular o burndown quando houver historico de trabalho em um final de se" +
                    "mana", new string[] {
                        "Burndown"});
#line 147
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "nome",
                        "inicio",
                        "final"});
            table21.AddRow(new string[] {
                        "C1",
                        "02/05/14",
                        "12/05/14"});
#line 148
 testRunner.Given("que exista(m) o(s) cronograma(s)", ((string)(null)), table21, "Dado ");
#line 151
     testRunner.And("que o dia atual seja \'02/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "descricao",
                        "situacao",
                        "estimativa inicial"});
            table22.AddRow(new string[] {
                        "1",
                        "T1",
                        "Planejamento",
                        "10"});
            table22.AddRow(new string[] {
                        "2",
                        "T2",
                        "Planejamento",
                        "7"});
            table22.AddRow(new string[] {
                        "3",
                        "T3",
                        "Planejamento",
                        "10"});
            table22.AddRow(new string[] {
                        "4",
                        "T4",
                        "Planejamento",
                        "3"});
#line 152
     testRunner.And("que o cronograma \'C1\' possui as seguintes tarefas:", ((string)(null)), table22, "E ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "data",
                        "tarefa",
                        "esforco realizado",
                        "estimativa restante"});
            table23.AddRow(new string[] {
                        "03/05/14",
                        "T3",
                        "2",
                        "8"});
#line 158
     testRunner.And("que o cronograma \'C1\' possui o seguinte historico de trabalho:", ((string)(null)), table23, "E ");
#line 161
     testRunner.And("que o dia atual seja \'05/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 162
 testRunner.When("o grafico burndown for calculado para o cronograma \'C1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        "Data",
                        "Planejado",
                        "Restante"});
            table24.AddRow(new string[] {
                        "02/05/14",
                        "30",
                        "30"});
            table24.AddRow(new string[] {
                        "03/05/14",
                        "",
                        "28"});
            table24.AddRow(new string[] {
                        "05/05/14",
                        "25",
                        "28"});
            table24.AddRow(new string[] {
                        "06/05/14",
                        "20",
                        ""});
            table24.AddRow(new string[] {
                        "07/05/14",
                        "15",
                        ""});
            table24.AddRow(new string[] {
                        "08/05/14",
                        "10",
                        ""});
            table24.AddRow(new string[] {
                        "09/05/14",
                        "5",
                        ""});
            table24.AddRow(new string[] {
                        "12/05/14",
                        "0",
                        ""});
#line 163
 testRunner.Then("o grafico de burndown deve conter os seguintes valores para o cronograma \'C1\':", ((string)(null)), table24, "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("02.02 - Calcular o burndown quando houver historico de trabalho em um feriado")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Time ter grafico de burndown de um planejamento de tarefas calculado automaticame" +
            "nte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        public virtual void _02_02_CalcularOBurndownQuandoHouverHistoricoDeTrabalhoEmUmFeriado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02.02 - Calcular o burndown quando houver historico de trabalho em um feriado", new string[] {
                        "Burndown"});
#line 175
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        "nome",
                        "inicio",
                        "final"});
            table25.AddRow(new string[] {
                        "C1",
                        "02/05/14",
                        "13/05/14"});
#line 176
  testRunner.Given("que exista(m) o(s) cronograma(s)", ((string)(null)), table25, "Dado ");
#line 179
     testRunner.And("que o dia atual seja \'02/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "Vigencia",
                        "Data",
                        "Descricao",
                        "Tipo",
                        "Situacao"});
            table26.AddRow(new string[] {
                        "Por dia, mes e ano",
                        "05/05/14",
                        "Folga 01",
                        "Folga",
                        "Ativo"});
#line 180
     testRunner.And("que o calendario institucional possui as seguintes definicoes:", ((string)(null)), table26, "E ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "descricao",
                        "situacao",
                        "estimativa inicial"});
            table27.AddRow(new string[] {
                        "1",
                        "T1",
                        "Planejamento",
                        "10"});
            table27.AddRow(new string[] {
                        "2",
                        "T2",
                        "Planejamento",
                        "7"});
            table27.AddRow(new string[] {
                        "3",
                        "T3",
                        "Planejamento",
                        "10"});
            table27.AddRow(new string[] {
                        "4",
                        "T4",
                        "Planejamento",
                        "3"});
#line 183
     testRunner.And("que o cronograma \'C1\' possui as seguintes tarefas:", ((string)(null)), table27, "E ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "data",
                        "tarefa",
                        "esforco realizado",
                        "estimativa restante"});
            table28.AddRow(new string[] {
                        "05/05/14",
                        "T3",
                        "2",
                        "5"});
#line 189
     testRunner.And("que o cronograma \'C1\' possui o seguinte historico de trabalho:", ((string)(null)), table28, "E ");
#line 192
     testRunner.And("que o dia atual seja \'06/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 193
 testRunner.When("o grafico burndown for calculado para o cronograma \'C1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "Data",
                        "Planejado",
                        "Restante"});
            table29.AddRow(new string[] {
                        "02/05/14",
                        "30",
                        "30"});
            table29.AddRow(new string[] {
                        "05/05/14",
                        "",
                        "25"});
            table29.AddRow(new string[] {
                        "06/05/14",
                        "25",
                        "25"});
            table29.AddRow(new string[] {
                        "07/05/14",
                        "20",
                        ""});
            table29.AddRow(new string[] {
                        "08/05/14",
                        "15",
                        ""});
            table29.AddRow(new string[] {
                        "09/05/14",
                        "10",
                        ""});
            table29.AddRow(new string[] {
                        "12/05/14",
                        "5",
                        ""});
            table29.AddRow(new string[] {
                        "13/05/14",
                        "0",
                        ""});
#line 194
 testRunner.Then("o grafico de burndown deve conter os seguintes valores para o cronograma \'C1\':", ((string)(null)), table29, "Entao ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("03.01 - Calcular o burndown quando houver tarefas com estimativas restantes causa" +
            "ndo um desvio negativo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Time ter grafico de burndown de um planejamento de tarefas calculado automaticame" +
            "nte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("alexandre")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        public virtual void _03_01_CalcularOBurndownQuandoHouverTarefasComEstimativasRestantesCausandoUmDesvioNegativo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03.01 - Calcular o burndown quando houver tarefas com estimativas restantes causa" +
                    "ndo um desvio negativo", new string[] {
                        "alexandre",
                        "Burndown"});
#line 211
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        "nome",
                        "inicio",
                        "final"});
            table30.AddRow(new string[] {
                        "C1",
                        "05/05/14",
                        "09/05/14"});
#line 212
  testRunner.Given("que exista(m) o(s) cronograma(s)", ((string)(null)), table30, "Dado ");
#line 215
     testRunner.And("que o dia atual seja \'05/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "descricao",
                        "situacao",
                        "estimativa inicial"});
            table31.AddRow(new string[] {
                        "1",
                        "T1",
                        "Planejamento",
                        "10"});
            table31.AddRow(new string[] {
                        "2",
                        "T2",
                        "Planejamento",
                        "7"});
            table31.AddRow(new string[] {
                        "3",
                        "T3",
                        "Execução",
                        "10"});
            table31.AddRow(new string[] {
                        "4",
                        "T4",
                        "Execução",
                        "3"});
#line 216
     testRunner.And("que o cronograma \'C1\' possui as seguintes tarefas:", ((string)(null)), table31, "E ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "data",
                        "tarefa",
                        "esforco realizado",
                        "estimativa restante"});
            table32.AddRow(new string[] {
                        "05/05/14",
                        "T3",
                        "2",
                        "8"});
            table32.AddRow(new string[] {
                        "06/05/14",
                        "T3",
                        "8",
                        "5"});
            table32.AddRow(new string[] {
                        "07/05/14",
                        "T4",
                        "4",
                        "1"});
#line 222
     testRunner.And("que o cronograma \'C1\' possui o seguinte historico de trabalho:", ((string)(null)), table32, "E ");
#line 227
     testRunner.And("que o dia atual seja \'07/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 228
 testRunner.When("o grafico burndown for calculado para o cronograma \'C1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "Data",
                        "Planejado",
                        "Restante"});
            table33.AddRow(new string[] {
                        "05/05/14",
                        "28",
                        "28"});
            table33.AddRow(new string[] {
                        "06/05/14",
                        "21",
                        "25"});
            table33.AddRow(new string[] {
                        "07/05/14",
                        "14",
                        "23"});
            table33.AddRow(new string[] {
                        "08/05/14",
                        "7",
                        ""});
            table33.AddRow(new string[] {
                        "09/05/14",
                        "0",
                        ""});
#line 229
 testRunner.Then("o grafico de burndown deve conter os seguintes valores para o cronograma \'C1\':", ((string)(null)), table33, "Entao ");
#line 236
     testRunner.And("o cronograma \'C1\' deve ter um desvio de -9 horas", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("03.02 - Calcular o burndown quando houver tarefas com estimativas restantes causa" +
            "ndo um desvio positivo")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Time ter grafico de burndown de um planejamento de tarefas calculado automaticame" +
            "nte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        public virtual void _03_02_CalcularOBurndownQuandoHouverTarefasComEstimativasRestantesCausandoUmDesvioPositivo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03.02 - Calcular o burndown quando houver tarefas com estimativas restantes causa" +
                    "ndo um desvio positivo", new string[] {
                        "Burndown"});
#line 239
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        "nome",
                        "inicio",
                        "final"});
            table34.AddRow(new string[] {
                        "C1",
                        "05/05/14",
                        "09/05/14"});
#line 240
  testRunner.Given("que exista(m) o(s) cronograma(s)", ((string)(null)), table34, "Dado ");
#line 243
     testRunner.And("que o dia atual seja \'05/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "descricao",
                        "situacao",
                        "estimativa inicial"});
            table35.AddRow(new string[] {
                        "1",
                        "T1",
                        "Execução",
                        "10"});
            table35.AddRow(new string[] {
                        "2",
                        "T2",
                        "Execução",
                        "7"});
            table35.AddRow(new string[] {
                        "3",
                        "T3",
                        "Planejamento",
                        "10"});
            table35.AddRow(new string[] {
                        "4",
                        "T4",
                        "Planejamento",
                        "3"});
#line 244
     testRunner.And("que o cronograma \'C1\' possui as seguintes tarefas:", ((string)(null)), table35, "E ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "data",
                        "tarefa",
                        "esforco realizado",
                        "estimativa restante"});
            table36.AddRow(new string[] {
                        "06/05/14 10:00",
                        "T1",
                        "1",
                        "8"});
            table36.AddRow(new string[] {
                        "06/05/14 14:30",
                        "T1",
                        "3",
                        "2"});
            table36.AddRow(new string[] {
                        "06/05/14 8:00",
                        "T2",
                        "10",
                        "1"});
#line 250
     testRunner.And("que o cronograma \'C1\' possui o seguinte historico de trabalho:", ((string)(null)), table36, "E ");
#line 255
     testRunner.And("que o dia atual seja \'06/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 256
 testRunner.When("o grafico burndown for calculado para o cronograma \'C1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Data",
                        "Planejado",
                        "Restante"});
            table37.AddRow(new string[] {
                        "05/05/14",
                        "30",
                        "30"});
            table37.AddRow(new string[] {
                        "06/05/14",
                        "22,5",
                        "16"});
            table37.AddRow(new string[] {
                        "07/05/14",
                        "15",
                        ""});
            table37.AddRow(new string[] {
                        "08/05/14",
                        "7,5",
                        ""});
            table37.AddRow(new string[] {
                        "09/05/14",
                        "0",
                        ""});
#line 257
 testRunner.Then("o grafico de burndown deve conter os seguintes valores para o cronograma \'C1\':", ((string)(null)), table37, "Entao ");
#line 264
     testRunner.And("o cronograma \'C1\' deve ter um desvio de 6,5 horas", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("03.03 - Calcular o burndown quando zerar as estimativas restantes antes do ultimo" +
            " dia")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Time ter grafico de burndown de um planejamento de tarefas calculado automaticame" +
            "nte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        public virtual void _03_03_CalcularOBurndownQuandoZerarAsEstimativasRestantesAntesDoUltimoDia()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03.03 - Calcular o burndown quando zerar as estimativas restantes antes do ultimo" +
                    " dia", new string[] {
                        "Burndown"});
#line 267
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "nome",
                        "inicio",
                        "final"});
            table38.AddRow(new string[] {
                        "C1",
                        "05/05/14",
                        "09/05/14"});
#line 268
  testRunner.Given("que exista(m) o(s) cronograma(s)", ((string)(null)), table38, "Dado ");
#line 271
     testRunner.And("que o dia atual seja \'05/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "descricao",
                        "situacao",
                        "estimativa inicial"});
            table39.AddRow(new string[] {
                        "1",
                        "T1",
                        "Encerramento",
                        "10"});
            table39.AddRow(new string[] {
                        "2",
                        "T2",
                        "Encerramento",
                        "7"});
            table39.AddRow(new string[] {
                        "3",
                        "T3",
                        "Encerramento",
                        "10"});
            table39.AddRow(new string[] {
                        "4",
                        "T4",
                        "Encerramento",
                        "3"});
#line 272
     testRunner.And("que o cronograma \'C1\' possui as seguintes tarefas:", ((string)(null)), table39, "E ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "data",
                        "tarefa",
                        "esforco realizado",
                        "estimativa restante"});
            table40.AddRow(new string[] {
                        "06/05/14 10:00",
                        "T1",
                        "1",
                        "0"});
            table40.AddRow(new string[] {
                        "06/05/14 11:01",
                        "T2",
                        "10",
                        "0"});
            table40.AddRow(new string[] {
                        "07/05/14 22:00",
                        "T3",
                        "5",
                        "0"});
            table40.AddRow(new string[] {
                        "08/05/14 00:01",
                        "T4",
                        "20",
                        "0"});
#line 278
     testRunner.And("que o cronograma \'C1\' possui o seguinte historico de trabalho:", ((string)(null)), table40, "E ");
#line 284
     testRunner.And("que o dia atual seja \'09/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 285
 testRunner.When("o grafico burndown for calculado para o cronograma \'C1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "Data",
                        "Planejado",
                        "Restante"});
            table41.AddRow(new string[] {
                        "05/05/14",
                        "30",
                        "30"});
            table41.AddRow(new string[] {
                        "06/05/14",
                        "22,5",
                        "13"});
            table41.AddRow(new string[] {
                        "07/05/14",
                        "15",
                        "3"});
            table41.AddRow(new string[] {
                        "08/05/14",
                        "7,5",
                        "0"});
            table41.AddRow(new string[] {
                        "09/05/14",
                        "0",
                        ""});
#line 286
 testRunner.Then("o grafico de burndown deve conter os seguintes valores para o cronograma \'C1\':", ((string)(null)), table41, "Entao ");
#line 293
     testRunner.And("o cronograma \'C1\' deve ter um desvio de 0 horas", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("03.04 - Calcular quando ainda houver as estimativas restantes apos o ultimo dia")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Time ter grafico de burndown de um planejamento de tarefas calculado automaticame" +
            "nte")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Burndown")]
        public virtual void _03_04_CalcularQuandoAindaHouverAsEstimativasRestantesAposOUltimoDia()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03.04 - Calcular quando ainda houver as estimativas restantes apos o ultimo dia", new string[] {
                        "Burndown"});
#line 296
this.ScenarioSetup(scenarioInfo);
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "nome",
                        "inicio",
                        "final"});
            table42.AddRow(new string[] {
                        "C1",
                        "05/05/14",
                        "09/05/14"});
#line 297
  testRunner.Given("que exista(m) o(s) cronograma(s)", ((string)(null)), table42, "Dado ");
#line 300
     testRunner.And("que o dia atual seja \'05/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "id",
                        "descricao",
                        "situacao",
                        "estimativa inicial"});
            table43.AddRow(new string[] {
                        "1",
                        "T1",
                        "Execução",
                        "10"});
            table43.AddRow(new string[] {
                        "2",
                        "T2",
                        "Encerramento",
                        "7"});
            table43.AddRow(new string[] {
                        "3",
                        "T3",
                        "Encerramento",
                        "10"});
            table43.AddRow(new string[] {
                        "4",
                        "T4",
                        "Encerramento",
                        "3"});
#line 301
     testRunner.And("que o cronograma \'C1\' possui as seguintes tarefas:", ((string)(null)), table43, "E ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "data",
                        "tarefa",
                        "esforco realizado",
                        "estimativa restante"});
            table44.AddRow(new string[] {
                        "06/05/14 10:00",
                        "T1",
                        "1",
                        "5"});
            table44.AddRow(new string[] {
                        "06/05/14 11:01",
                        "T2",
                        "10",
                        "0"});
            table44.AddRow(new string[] {
                        "07/05/14 22:00",
                        "T3",
                        "5",
                        "0"});
            table44.AddRow(new string[] {
                        "08/05/14 00:01",
                        "T4",
                        "20",
                        "0"});
#line 307
     testRunner.And("que o cronograma \'C1\' possui o seguinte historico de trabalho:", ((string)(null)), table44, "E ");
#line 313
     testRunner.And("que o dia atual seja \'10/05/14\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 314
 testRunner.When("o grafico burndown for calculado para o cronograma \'C1\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "Data",
                        "Planejado",
                        "Restante"});
            table45.AddRow(new string[] {
                        "05/05/14",
                        "30",
                        "30"});
            table45.AddRow(new string[] {
                        "06/05/14",
                        "22,5",
                        "18"});
            table45.AddRow(new string[] {
                        "07/05/14",
                        "15",
                        "8"});
            table45.AddRow(new string[] {
                        "08/05/14",
                        "7,5",
                        "5"});
            table45.AddRow(new string[] {
                        "09/05/14",
                        "0",
                        "5"});
#line 315
 testRunner.Then("o grafico de burndown deve conter os seguintes valores para o cronograma \'C1\':", ((string)(null)), table45, "Entao ");
#line 322
     testRunner.And("o cronograma \'C1\' deve ter um desvio de -5 horas", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
